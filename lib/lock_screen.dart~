import 'package:flutter/material.dart';
import 'package:local_auth/local_auth.dart';
import 'package:lottie/lottie.dart';

class UnlockScreen extends StatefulWidget {
  const UnlockScreen({Key? key}) : super(key: key);

  @override
  _UnlockScreenState createState() => _UnlockScreenState();
}

class _UnlockScreenState extends State<UnlockScreen> {
  final LocalAuthentication auth = LocalAuthentication();
  bool _isAuthenticating = false;
  bool _hasFaceID = false;

  @override
  void initState() {
    super.initState();
    _checkFaceIDSupport();
    _authenticate();
  }

  Future<void> _checkFaceIDSupport() async {
    try {
      final List<BiometricType> availableBiometrics =
      await auth.getAvailableBiometrics();
      if (availableBiometrics.contains(BiometricType.face)) {
        print('Face ID is available');
        setState(() => _hasFaceID = true);
      }
    } catch (e) {
      print('Error checking biometrics: $e');
    }
  }

  Future<void> _authenticate() async {
    if (_isAuthenticating) return;

    setState(() => _isAuthenticating = true);

    try {
      final bool didAuthenticate = await auth.authenticate(
        localizedReason: 'Unlock the app using ${_hasFaceID ? "Face ID" : "biometrics"}',
        options: const AuthenticationOptions(
          useErrorDialogs: true,
          stickyAuth: true,
          biometricOnly: true, // Ensures only biometric auth is used
        ),

      );

      if (didAuthenticate) {
        if (mounted) {
          Navigator.pushReplacementNamed(context, '/home');
        }
      } else {
        if (mounted) {
          _showErrorDialog();
        }
      }
    } catch (e) {
      if (mounted) {
        _showErrorDialog();
      }
    } finally {
      setState(() => _isAuthenticating = false);
    }
  }

  void _showErrorDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Authentication Failed'),
        content: Text('Please try ${_hasFaceID ? "Face ID" : "biometrics"} again'),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              _authenticate();
            },
            child: const Text('Retry'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            SizedBox(
              width: 200,
              height: 200,
              child: Lottie.asset(
                'assets/face_id_animation.json',
                repeat: true,
              ),
            ),
            const SizedBox(height: 20),
            Text(
              _hasFaceID ? 'Unlock with Face ID' : 'Unlock with Biometrics',
              style: const TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 20),
            if (_isAuthenticating)
              const CircularProgressIndicator()
            else
              ElevatedButton(
                onPressed: _authenticate,
                child: const Text('Try Again'),
              ),
          ],
        ),
      ),
    );
  }
}